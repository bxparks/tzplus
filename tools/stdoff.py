#!/usr/bin/env python3
#
# Copyright 2023 Brian T. Park
#
# MIT License.

"""
Read the raw IANA TZ Database files at the location specified by `--input_dir`.
Print a list of (zone, stdoff(int), stdoff(string)) in a file named `stdoff.txt`
in the `--output_dir`. The `input_dir` contains the TZDB files assumed to be
generated by the `copytz.sh` which also contains a `version.txt` file that
indicates the TZDB version (e.g. "2023c").

Example:
$ stdoff.py --input_dir ../tzdb --output_dir .
"""

import argparse
import logging
import sys
import datetime

from stdoffextractor import Extractor
from stdoffgenerator import StdoffGenerator


def main() -> None:
    parser = argparse.ArgumentParser(description='Generate Zone Info.')

    # Extractor flags.
    parser.add_argument(
        '--input_dir',
        help='Location of the input directory',
        required=True)

    # Target location of the generated files.
    parser.add_argument(
        '--output_dir',
        help='Location of the output directory (default: current)',
        required=True,
        default='',
    )

    # Target location of the generated files.
    parser.add_argument(
        '--year',
        help='Year used to calculate the STDOFF (default: current)',
        default='',
    )

    # Parse the command line arguments
    args = parser.parse_args()

    # Configure logging. This should normally be executed after the
    # parser.parse_args() because it allows us set the logging.level using a
    # flag.
    logging.basicConfig(level=logging.INFO)

    # How the script was invoked
    invocation = ' '.join(sys.argv)

    # Extract TZDB version.txt
    tz_version = extract_version(args.input_dir)

    # Extract the TZ files
    logging.info('======== Extracting TZ Data files')
    extractor = Extractor(args.input_dir)
    zones_map, links_map = extractor.parse()

    # Calculate the extraction year.
    if args.year != '':
        year = int(args.year)
    else:
        now = datetime.datetime.now()
        year = now.year

    # Generate the stdoff list.
    logging.info('==== Creating stdoff.txt file')
    generator = StdoffGenerator(
        invocation=invocation,
        tz_version=tz_version,
        year=year,
        zones_map=zones_map,
        links_map=links_map,
    )
    generator.generate_files(args.output_dir)


def extract_version(input: str) -> str:
    with open(input + "/version.txt", 'r', encoding='utf-8') as f:
        version = f.readline()
        return version.strip()


if __name__ == '__main__':
    main()
